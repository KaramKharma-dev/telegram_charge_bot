"""init schema

Revision ID: fbb9ee2e3435
Revises: 
Create Date: 2025-08-09 18:55:26.547580

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision: str = 'fbb9ee2e3435'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('exchange_rate',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('from_currency', sa.CHAR(length=3), nullable=False),
    sa.Column('to_currency', sa.CHAR(length=3), nullable=False),
    sa.Column('value', sa.DECIMAL(precision=18, scale=8), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('from_currency', 'to_currency', name='uq_exch_from_to')
    )
    op.create_index('ix_exch_from_to', 'exchange_rate', ['from_currency', 'to_currency'], unique=False)
    op.create_table('products',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=False),
    sa.Column('unit_label', sa.String(length=20), nullable=False),
    sa.Column('cost_per_unit_usd', sa.DECIMAL(precision=18, scale=8), nullable=False),
    sa.Column('profit_per_unit_usd', sa.DECIMAL(precision=18, scale=8), nullable=False),
    sa.Column('min_qty', sa.Integer(), server_default='1', nullable=False),
    sa.Column('step_qty', sa.Integer(), server_default='1', nullable=False),
    sa.Column('max_qty', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default='1', nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('topup_methods',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('details', mysql.JSON(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default='1', nullable=False),
    sa.Column('image', sa.String(length=255), nullable=True),
    sa.Column('barcode', sa.String(length=255), nullable=True),
    sa.Column('note', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('tg_id', sa.BigInteger(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('country', sa.CHAR(length=2), nullable=True),
    sa.Column('referrer_user_id', sa.BigInteger(), nullable=True),
    sa.Column('is_blocked', sa.Boolean(), server_default='0', nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['referrer_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_tg_id'), 'users', ['tg_id'], unique=True)
    op.create_table('orders',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('product_id', sa.BigInteger(), nullable=False),
    sa.Column('product_name', sa.String(length=120), nullable=False),
    sa.Column('qty', sa.Integer(), nullable=False),
    sa.Column('target', sa.String(length=120), nullable=False),
    sa.Column('unit_price_usd', sa.DECIMAL(precision=18, scale=8), nullable=False),
    sa.Column('total_price_usd', sa.DECIMAL(precision=18, scale=8), nullable=False),
    sa.Column('status', sa.Enum('created', 'sent', 'completed', 'failed', name='order_status'), server_default='created', nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_order_user_created', 'orders', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_orders_product_id'), 'orders', ['product_id'], unique=False)
    op.create_index(op.f('ix_orders_user_id'), 'orders', ['user_id'], unique=False)
    op.create_table('wallets',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('currency', sa.CHAR(length=3), server_default='USD', nullable=False),
    sa.Column('balance', sa.DECIMAL(precision=18, scale=2), server_default='0.00', nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('balance >= 0', name='ck_wallet_balance_non_negative'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'currency', name='uq_wallet_user_currency')
    )
    op.create_index('ix_wallet_user_created', 'wallets', ['user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_wallets_user_id'), 'wallets', ['user_id'], unique=False)
    op.create_table('wallet_transactions',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('wallet_id', sa.BigInteger(), nullable=False),
    sa.Column('topup_method_id', sa.BigInteger(), nullable=True),
    sa.Column('type', sa.Enum('topup', 'order', 'refund', 'admin_adjustment', name='wallettxn_type'), nullable=False),
    sa.Column('direction', sa.Enum('credit', 'debit', name='wallettxn_direction'), nullable=False),
    sa.Column('amount_usd', sa.DECIMAL(precision=18, scale=2), nullable=False),
    sa.Column('status', sa.Enum('pending', 'approved', 'rejected', name='wallettxn_status'), server_default='pending', nullable=False),
    sa.Column('operation_ref_or_txid', sa.String(length=128), nullable=True),
    sa.Column('related_order_id', sa.BigInteger(), nullable=True),
    sa.Column('idempotency_key', sa.String(length=64), nullable=True),
    sa.Column('note', sa.String(length=255), nullable=True),
    sa.Column('wallet_balance_after', sa.DECIMAL(precision=18, scale=2), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('approved_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['related_order_id'], ['orders.id'], ),
    sa.ForeignKeyConstraint(['topup_method_id'], ['topup_methods.id'], ),
    sa.ForeignKeyConstraint(['wallet_id'], ['wallets.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('idempotency_key', name='uq_wallettxn_idemkey'),
    sa.UniqueConstraint('operation_ref_or_txid', name='uq_wallettxn_opref')
    )
    op.create_index(op.f('ix_wallet_transactions_related_order_id'), 'wallet_transactions', ['related_order_id'], unique=False)
    op.create_index(op.f('ix_wallet_transactions_topup_method_id'), 'wallet_transactions', ['topup_method_id'], unique=False)
    op.create_index(op.f('ix_wallet_transactions_wallet_id'), 'wallet_transactions', ['wallet_id'], unique=False)
    op.create_index('ix_wallettxn_status', 'wallet_transactions', ['status'], unique=False)
    op.create_index('ix_wallettxn_wallet_created', 'wallet_transactions', ['wallet_id', 'created_at'], unique=False)
    op.create_table('logs',
    sa.Column('id', sa.BigInteger(), nullable=False),
    sa.Column('level', sa.Enum('info', 'warning', 'error', name='log_level'), nullable=False),
    sa.Column('source', sa.String(length=50), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=True),
    sa.Column('order_id', sa.BigInteger(), nullable=True),
    sa.Column('wallet_txn_id', sa.BigInteger(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['wallet_txn_id'], ['wallet_transactions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_logs_created', 'logs', ['created_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_logs_created', table_name='logs')
    op.drop_table('logs')
    op.drop_index('ix_wallettxn_wallet_created', table_name='wallet_transactions')
    op.drop_index('ix_wallettxn_status', table_name='wallet_transactions')
    op.drop_index(op.f('ix_wallet_transactions_wallet_id'), table_name='wallet_transactions')
    op.drop_index(op.f('ix_wallet_transactions_topup_method_id'), table_name='wallet_transactions')
    op.drop_index(op.f('ix_wallet_transactions_related_order_id'), table_name='wallet_transactions')
    op.drop_table('wallet_transactions')
    op.drop_index(op.f('ix_wallets_user_id'), table_name='wallets')
    op.drop_index('ix_wallet_user_created', table_name='wallets')
    op.drop_table('wallets')
    op.drop_index(op.f('ix_orders_user_id'), table_name='orders')
    op.drop_index(op.f('ix_orders_product_id'), table_name='orders')
    op.drop_index('ix_order_user_created', table_name='orders')
    op.drop_table('orders')
    op.drop_index(op.f('ix_users_tg_id'), table_name='users')
    op.drop_table('users')
    op.drop_table('topup_methods')
    op.drop_table('products')
    op.drop_index('ix_exch_from_to', table_name='exchange_rate')
    op.drop_table('exchange_rate')
    # ### end Alembic commands ###
